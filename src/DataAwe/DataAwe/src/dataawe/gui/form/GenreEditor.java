/* 
 * Copyright (C) 2014 Reuben Steenekamp
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package dataawe.gui.form;

import dataawe.entity.Genre;
import java.awt.Component;

/**
 *
 * @author Reuben Steenekamp
 */
public class GenreEditor extends javax.swing.JPanel implements ItemEditor<Genre> {
    private Genre item;

    /**
     * Creates new form GenreEditor
     */
    public GenreEditor() {
        initComponents();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionEditorPane = new javax.swing.JEditorPane();

        nameLabel.setText("Name");

        descriptionScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));

        descriptionEditorPane.setPreferredSize(new java.awt.Dimension(0, 0));
        descriptionScrollPane.setViewportView(descriptionEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionScrollPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane descriptionEditorPane;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void reset() {
        setItem(new Genre());
    }
    
    @Override
    public void setItem(Genre item) {
        this.item = item;
        nameField.setText(item.getName());
        descriptionEditorPane.setText(item.getDescription());
    }

    @Override
    public Genre getItem() {
        item.setName(nameField.getText());
        item.setDescription(descriptionEditorPane.getText());
        return item;
    }

    @Override
    public Component getComponent() {
        return this;
    }
    
    @Override
    public void setEnabled(boolean enabled) {
        nameField.setEnabled(enabled);
        descriptionEditorPane.setEnabled(enabled);
    }
}
