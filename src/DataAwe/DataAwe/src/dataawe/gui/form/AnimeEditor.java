/* 
 * Copyright (C) 2014 Reuben Steenekamp
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package dataawe.gui.form;

import dataawe.entity.Anime;
import dataawe.entity.Genre;
import dataawe.gui.Observable;
import java.awt.Component;
import java.util.Date;
import java.util.List;
import java.util.Observer;
import java.util.function.Supplier;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Reuben Steenekamp
 */
public class AnimeEditor extends javax.swing.JPanel implements ItemEditor<Anime> {
    private Supplier<List<Genre>> genreListSupplier;
    private Observable genreListObservable;
    private Observer genreListObserver;
    private Anime item;
    
    /**
     * Creates new form AnimeEditor
     * @param genreListObservable
     * @param genreListSupplier
     */
    public AnimeEditor(Observable genreListObservable, Supplier<List<Genre>> genreListSupplier) {
        initComponents();
        this.genreListSupplier = genreListSupplier;
        genreListObserver = (obs, val) -> {
                List<Genre> genres = genreListSupplier.get();
                genreComboBox.setModel(new DefaultComboBoxModel<>());
                for(Genre genre : genres)
                    genreComboBox.addItem(genre);
        };
        this.genreListObservable = genreListObservable;
        genreListObservable.addObserver(genreListObserver);
        genreListObservable.setChanged();
        genreListObservable.notifyObservers();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        dateAiredLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        ratingLabel = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        dateAiredField = new javax.swing.JFormattedTextField();
        genreComboBox = new javax.swing.JComboBox<Genre>();
        ratingSlider = new javax.swing.JSlider();
        dubbedCheckBox = new javax.swing.JCheckBox();

        titleLabel.setText("Title");

        dateAiredLabel.setText("Date aired");

        genreLabel.setText("Genre");

        ratingLabel.setText("Rating");

        dateAiredField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));

        ratingSlider.setMajorTickSpacing(10);
        ratingSlider.setMinorTickSpacing(2);
        ratingSlider.setPaintTicks(true);
        ratingSlider.setSnapToTicks(true);
        ratingSlider.setToolTipText("");
        ratingSlider.setValue(0);

        dubbedCheckBox.setText("Dubbed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateAiredLabel)
                    .addComponent(ratingLabel)
                    .addComponent(titleLabel)
                    .addComponent(genreLabel)
                    .addComponent(dubbedCheckBox))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genreComboBox, 0, 484, Short.MAX_VALUE)
                    .addComponent(dateAiredField)
                    .addComponent(titleField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ratingSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateAiredLabel)
                    .addComponent(dateAiredField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel)
                    .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ratingLabel)
                        .addGap(7, 7, 7)
                        .addComponent(dubbedCheckBox))
                    .addComponent(ratingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField dateAiredField;
    private javax.swing.JLabel dateAiredLabel;
    private javax.swing.JCheckBox dubbedCheckBox;
    private javax.swing.JComboBox<Genre> genreComboBox;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JSlider ratingSlider;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    
    public void reset() {
        setItem(new Anime());
    }
    
    @Override
    public void setItem(Anime item) {
        this.item = item;
        titleField.setText(item == null ? "" : item.getTitle());
        dateAiredField.setValue(item == null ? "" : item.getAired());
        genreComboBox.setSelectedItem(item == null ? null : item.getGenre());
        ratingSlider.setValue(item == null ? 0 : (int)(item.getRating()*10));
        dubbedCheckBox.setSelected(item != null && item.getDubbed());
    }
    
    @Override
    public Anime getItem() {
        int idx = genreComboBox.getSelectedIndex();
        Genre genre = idx == -1 ? null : genreComboBox.getItemAt(idx);
        
        item.setTitle(titleField.getText());
        item.setAired((Date)dateAiredField.getValue());
        item.setGenre(genre);
        item.setRating(ratingSlider.getValue()/10f);
        item.setDubbed(dubbedCheckBox.isSelected());
        
        return item;
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public void setEnabled(boolean enabled) {
        dateAiredField.setEnabled(enabled);
        dubbedCheckBox.setEnabled(enabled);
        genreComboBox.setEnabled(enabled);
        ratingSlider.setEnabled(enabled);
        titleField.setEnabled(enabled);
    }
}
